package main

import (
	"encoding/json"
	"fmt"
	"github.com/elastic/go-elasticsearch/v7"
	"log"
	"time"
)

type AutoGenerated struct {
	Took     int  `json:"took"`
	TimedOut bool `json:"timed_out"`
	Shards   struct {
		Total      int `json:"total"`
		Successful int `json:"successful"`
		Skipped    int `json:"skipped"`
		Failed     int `json:"failed"`
	} `json:"_shards"`
	Hits struct {
		Total struct {
			Value    int    `json:"value"`
			Relation string `json:"relation"`
		} `json:"total"`
		MaxScore float64 `json:"max_score"`
		Hits     []struct {
			Index  string  `json:"_index"`
			Type   string  `json:"_type"`
			ID     string  `json:"_id"`
			Score  float64 `json:"_score"`
			Source struct {
				ID       int    `json:"id"`
				Name     string `json:"name"`
				Address  string `json:"address"`
				Phone    string `json:"phone"`
				Location struct {
					Lat float64 `json:"lat"`
					Lon float64 `json:"lon"`
				} `json:"location"`
			} `json:"_source"`
		} `json:"hits"`
	} `json:"hits"`
}

type Place struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Address  string `json:"address"`
	Phone    string `json:"phone"`
	Location struct {
		Lat float64 `json:"lat"`
		Lon float64 `json:"lon"`
	} `json:"location"`
}

type types struct {
	Places []Place `json:"_source"`
}

func main() {

	es, err := elasticsearch.NewDefaultClient()
	if err != nil {
		log.Fatal(err)
	}
	res, _ := es.Search(
		es.Search.WithIndex("places"),
		es.Search.WithSize(10),
		es.Search.WithScroll(30*time.Second),
	)
	//req := esapi.SearchRequest{
	//	Index:        []string{"places"},
	//	DocumentType: []string{"place"},
	//	Sort:         []string{"id: asc"},
	//}

	//response, _ := req.Do(context.Background(), es)

	fmt.Println(res.Status())
	var tmp map[string]interface{}

	if err := json.NewDecoder(res.Body).Decode(&tmp); err != nil {
		log.Fatal(err)
	}
	fmt.Println(tmp)
}
